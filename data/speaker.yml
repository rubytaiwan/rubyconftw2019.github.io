- schedule_id: 3
  order: 1
  keynote: true
  name: 'Yukihiro Matsumoto (Matz)'
  title: 'Creator of Ruby, Heroku'
  avatar: 'speakers/matz.jpg'
  twitter: yukihiro_matz
  github: matz
  lang: en
  subject: 'TBD'
  summary: |-
- schedule_id: 19
  order: 1
  keynote: true
  name: 'Yo-An Lin (C9S)'
  title: 'UI, UX, Frontend, Backend Professional.'
  avatar: 'speakers/c9s.jpg'
  home: https://about.me/c9s
  github: c9s
  twitter: c9s
  lang: zh
  subject: 'Virtual Machines: their common parts and what makes them special'
  summary: "Language-based virtual machines were designed and implemented from different backgrounds, concepts and thinking.

In this talk, we will peek into the implementation of some language VMs (especially CRuby) to understand the complex internal parts."
- schedule_id: 15
  order: 1
  keynote: true
  name: Samuel Williams
  title: 
  avatar: speakers/ioquatix.jpg
  home: https://www.codeotaku.com/index
  github: ioquatix
  twitter: ioquatix
  lang: en
  subject: 'The Journey to One Million'
  summary: "Modern servers are capable of supporting millions of clients, both in terms of requests per second, and simultaneous connections. However, unless scalability is a priority, it can be very difficult to utilise the available hardware efficiently. Overheads in the application code, frameworks and operating system can act as force multipliers which increase memory pressure, latency and resource utilisation. We discuss the challenges encountered when scaling Ruby to one million concurrent WebSocket connections, and investigate the changes required to make it possible."
- schedule_id: 31
  order: 1
  keynote: true
  name: 'Aaron Patterson'
  title: ''
  avatar: '//avatars3.githubusercontent.com/u/3124?s=460&v=4'
  home: 'http://tenderlovemaking.com/'
  github: tenderlove
  twitter: tenderlove
  lang: en
  subject: The View Is Clear from Here
  summary: "Web applications typically have bottlenecks at the database layer.  This is one
reason Active Record gets so much attention by application developers, Rails
core developers, and conference speakers.  In this talk we will be focusing on
something a little bit different.  Instead of the database layer, we will be
looking at the view layer of the application.  We will be looking at how view
rendering is handled in Rails.  This will include the process by which views are
compiled, cached, and rendered.  We'll learn how much memory they are found, how
much memory they use, and more importantly how we can speed them up.  Audience
members should expect to leave with more information about Rails internals along
with development techniques that they can use in their applications today!"
- schedule_id: 11
  order: 2
  name: Jenna Blumenthal
  title: ''
  avatar: "//avatars.githubusercontent.com/u/8824824?v=3"
  twitter: 'jennaleeblume'
  github: jennaleeb
  lang: en
  subject: Event Sourcing for Everyone
  summary: In applications that persist data, getting the current state of the system
    is trivial. But often the question is not only where are we now, but how did we
    get here? This talk is a jargon-free introduction to the concept of event sourcing,
    using a Ruby application as an example.
- schedule_id: 29
  order: 1
  name: Vipul A M
  title: ''
  avatar: "//avatars.githubusercontent.com/u/567626?v=3"
  twitter: ''
  github: vipulnsward
  lang: en
  subject: What's new in Rails 6?
  summary: "Rails 6 is shaping to be one of the biggest releases in some time for
    Rails. With tons of new stuff being added like Action Mailbox, Action Text, Multiple
    DBs support, Parallel Testing, Zietwerk, Webpacker as a default and more! \r\n\r\nLets
    take a look at all these exciting new things and how they improve your existing
    applications as well as how you can start using the new frameworks for different
    use cases in your applications."
- schedule_id: 5
  order: 1
  name: Joel Hawksley
  title: ''
  avatar: "//avatars.githubusercontent.com/u/1940294?v=3"
  twitter: ''
  github: joelhawksley
  lang: en
  subject: Rethinking the View Layer with Components
  summary: 'While most of Rails has evolved over time, the view layer hasn’t changed
    much. At GitHub, we are incorporating the lessons of the last decade into a new
    paradigm: components. This approach has enabled us to leverage traditional object-oriented
    techniques to test our views in isolation, avoid side-effects, refactor with confidence,
    and perhaps most importantly, make our views first-class citizens in Rails.'
- schedule_id: 5
  order: 2
  name: Shibata Hiroshi
  title: "Aember of Ruby core/RubyGems/Bundler team"
  avatar: "//avatars.githubusercontent.com/u/12301?v=3"
  twitter: hsbt
  github: hsbt
  lang: en
  subject: The future of library dependency management of Ruby
  summary: "I did merge Bundler into Ruby core repository and shipped bundler as the
    standard library on Ruby 2.6. It helps to a preparation of the fresh Ruby install
    and easy to use gem and bundle commands.\r\n\r\nI'm going to show the features
    of Bundler and RubyGems and the integration plan of RubyGems and Bundler. Also,
    I will show the issues of the current status. You can resolve them after my talk."
- schedule_id: 9
  order: 1
  name: Delton Ding
  title: ''
  avatar: "//avatars.githubusercontent.com/u/2303500?v=3"
  twitter: ''
  github: dsh0416
  lang: en
  subject: Protect Your Copyrighted Ruby Code in Distribution
  summary: As all Interpreted Programming Languages, Ruby projects' source code can
    be easily viewed in distribution. If your project supports self-hosted deployment,
    it may be hard to protect your copyrights. This talk would summarize existing
    methods, and tries to introduce some tricks in protecting your copyrights.
- schedule_id: 21
  order: 1
  name: 蒼時弦や
  title: Rails Developer, 五倍紅寶石
  avatar: "//cfp.rubyconf.tw/uploads/user/photo/7/icon-256.png"
  twitter: elct9620
  github: elct9620
  home: 'https://frost.tw/'
  lang: zh
  subject: 從 Enumerator 看 Ruby 的迭代器 / Decipher Ruby's iterator with Enumerator
  summary: "在 Ruby 中我們經常的會使用 `#each` 來遍歷陣列或者一些物件，不過我們卻很少思考他是怎麼運作的。尤其是在仔細探索之後，會發現 Ruby 的迭代器跟其他我們熟悉的語言有所不同。而且，在比較新版本的 Ruby 中還提供了 `#lazy` 方法，這是在其他語言相對少見的特型。\r\n\r\n這些特性到底是怎麼運作的，我們是否可以用 Ruby 將其實作呢？讓我們從閱讀 Ruby 原始碼的過程中，一步步的了解這個我們最常使用的方法。\r\nWe often use #each to loop through array and friends in Ruby, but we seldom think about how it actually works. Ruby's iterator is quite different compared with other languages, for instance we have uncommon methods like #lazy. How exactly do they work and can we implement them in Ruby? Let's dive in Ruby source code and find out."
- schedule_id: 7
  order: 2
  name: Bernie Chiu
  title: Senior Software Engineer, Easyship
  avatar: "//avatars.githubusercontent.com/u/2749593?v=3"
  twitter: ''
  github: berniechiu
  lang: en
  subject: Let's Scale Ruby Applications with Love
  summary: "We know observing performance is tedious and tiresome. But what if we
    continue to write codes that poison the repo and later become legacy which somehow
    results in software regression? Because of the situation like this, we all want
    the code itself to be readable, explainable and performant by default, so others
    are able to benefit from reading it and leaning from the codebase.\r\n\r\nBy giving
    some real world examples, I hope it will help programmers to clearly understand
    the step by step procedure to structure their codes with more conventional ways
    of approaching modern software principles. Bringing the happiness to yourself,
    and also to others."
- schedule_id: 9
  order: 2
  name: Matias Korhonen
  title: ''
  avatar: "//avatars.githubusercontent.com/u/43314?v=3"
  twitter: ''
  github: matiaskorhonen
  lang: en
  subject: Ruby like it's 1995
  summary: "Cast your mind back to the year 1995. Gansta's Paradise is the top hit
    of the year. Friends is the hottest show on TV.\r\n\r\nAnd just days after I turn
    nine, Matz releases Ruby publicly for the first time.\r\n\r\nIn this talk I go
    back to Ruby 0.95 and see what it takes to get it running on modern hardware."
- schedule_id: 11
  order: 1
  name: Charles Oliver Nutter
  title: ''
  avatar: "//avatars.githubusercontent.com/u/10135?v=3"
  twitter: ''
  github: headius
  lang: en
  subject: Scalable Applications with JRuby
  summary: "JRuby is the fastest and most scalable way to run web applications built
    with Ruby or Rails. This past year we've continued work on better database support,
    more Ruby optimizations, and tighter integration with recent JDK releases. In
    this talk, I'll cover:\r\n\r\n* Getting start with JRuby, building new applications
    or migrating existing ones\r\n* Things to know about scaling JRuby, including
    tuning flags and deployment patterns\r\n* Future plans for maintaining Ruby and
    Rails compatibility\r\n* A call-to-action for anyone who'd like to help keep JRuby
    moving forward"
- schedule_id: 23
  order: 1
  name: Wen-Chuan Lin
  title: ''
  avatar: "//avatars.githubusercontent.com/u/12430486?v=3"
  twitter: SpringisOK
  github: Springok
  lang: zh
  subject: '開拓者們建立鐵道的辛酸血淚史 Building Rails with Trailblazer, The Good, Bad and Ugly. '
  summary: "隨著 Rails 專案成長到一定規模，需要處理的商業邏輯也越來越複雜時，如果還是使用 Rails 原先的 MVC 架構或其提倡的一些模式，看著日漸膨脹的
    model ，而同一時間，排山倒海的 validation / callback 拆分的需求不斷襲來、頁面顯示邏輯有越來越多的情境時，團隊很有機會遇到進退維谷的情境。\r\n因此，想跟各位分享團隊在應用
    Trailblazer 到 Rails 專案兩年多來的經驗，它所帶來的好處、地雷，以及團隊的成果與專案風貌的改變。在這個分享裡，會有 Trailblazer
    框架簡介與相關主要幾個組成的說明，跟團隊選用它的理由，以及到目前為止導入過程遇到的問題與經驗分享，最後談談選用任何技術框架解決問題時，可能會為個人或團隊帶來的思維改變。\r\n-
    What is Trailblazer really? \r\n- Why we have Trailblazer in our project?\r\n-
    Experience about adapting Trailblazer to our system \r\n- Beyond Trailblazer"
- schedule_id: 7
  order: 1
  name: Soutaro Matsumoto
  title: CTO, Sider
  avatar: "//avatars.githubusercontent.com/u/139089?v=3"
  twitter: soutaro
  github: soutaro
  lang: en
  subject: Ruby with types
  summary: "We have been working on a project to provide an option to type checker
    for Ruby3. The primary goal of the project had been to develop a type checker,
    but we finally found that the development of type checker is insufficient. We
    have to define a language to write type definition and a protocol to ship gems
    with their type definitions. We should provide everything users will need to start
    type checking.\r\n\r\nIn this talk, I will explain the overview of the project.
    I also will introduce my type checker called Steep and let you know how it can
    improve your Ruby programming experience."
- schedule_id: 21
  order: 2
  name: Samuel Giddins
  title: ''
  avatar: "//avatars.githubusercontent.com/u/1946610?v=3"
  twitter: ''
  github: segiddins
  lang: en
  subject: Making CocoaPods Fast(er) with Modern Ruby Tooling
  summary: Writing performant code is hard. Writing performant ruby code that does
    lots of stuff is really hard. CocoaPods got to be pretty slow “at scale”, and
    this is the story of how we made our pod install times bearable again.
- schedule_id: 25
  order: 1
  name: Tse-Ching Ho
  title: ''
  avatar: "//avatars.githubusercontent.com/u/12554?v=3"
  twitter: ''
  github: tsechingho
  lang: zh
  subject: Suit up for frontend and backend development
  summary: "對於開發講究 UI/UX 效果的網站，嫻熟前端框架是不可或缺的技能。採用 Rails 當作後端框架，使用 webpacker 協助架構前端環境後，該如何有效寫出好維護的
    ruby 和 javascript 程式，會是網站重要的一步。\r\n\r\nRuby/Rails 這十幾年的發展，已累積不少好用的開發模型套件，諸如 Model,
    Value, Dispatch, Form, Presenter, Decorator, Validator, Job, Mailer, Uploader,
    Service, Spec, Auth, Police, Audit, Deploy 等，要將這些技巧融入後端程式，並銜接前端應用的需求，需要有彈性的配套，方便開發者應付隕石墜落式的開發需求。\r\n\r\n此次將以後端
    Ruby/Rails 為主軸，討論如何利用現有的套件，或自行開發的模組，架構出符合自己習慣的前後端整合開發配套。\r\n\r\nThis talk will
    tell how to use gems and self crafted modules to assemble a rails application
    suitable for frontend/backend separated development."
- schedule_id: 23
  order: 2
  name: Li-Fong Lin
  title: ''
  avatar: "//avatars.githubusercontent.com/u/468564?v=3"
  twitter: ''
  github: stackng
  lang: en
  subject: Running and observing Rails application on GKE
  summary: "Kubernetes is becoming the new standard of infra and the emerging cloud
    platform GCP has integrated it as its powerful GKE.\r\n\r\nWhen a Rails app comes
    to GKE and GCP, we need to have different approaches for deploying, running and
    observing it from what we used to.\r\n\r\nThe sharing will cover what we went
    from the VM fashion to the current GKE setup, and also the good and the challenge
    to run on GCP.\r\n\r\n"
- schedule_id: 27
  order: 1
  name: Luka Huang
  title: Senior Backend Engineer, Splashtop
  avatar: "//avatars.githubusercontent.com/u/7014009?v=3"
  twitter: codingluka
  github: codingluka
  lang: zh
  subject: Using AWS Lambda with Ruby on a large-scale system
  summary: "\bThe serverless framework is very popular for the last 5 years. AWS Lambda
    is the most important service in the Serverless framework.\r\n\r\nAWS Lambda supports
    Ruby runtime on November 29, 2018. Now we can develop AWS lambda with Ruby\b.
    But what situation should we use AWS Lambda?\r\n\r\nThe key point in this talk
    is \b\"Why we choose AWS Lambda as a solution on a large-scale system?\".\r\n\r\nThe
    first question is \"What are pain points when we want to implement a new feature
    on a large-scale system?\".\r\n\r\nAnd then let's think about \"How AWS Lambda
    solve these pain points?\".\r\n\r\nI will share some experiences about developing
    features with AWS Lambda. Discussing what situation should we use AWS Lambda.\r\n\r\nHere’s
    what you will learn:\r\n- What is AWS Lambda?\r\n- What is the serverless
    framework?\r\n- What is event-driven programming?\r\n- What are pain points when
    we develop features on large-scale system?\r\n- How AWS Lambda solves these pain
    points?\r\n- How to develop AWS Lambda with ruby?\r\n\r\n無伺服器架構是最近幾年非常熱門的話題，同時也是
    AWS 極力推廣的重點之一，而 AWS lambda 是實現無伺服器架構最重要的一環。\r\n\r\nAWS Lambda 在去年的 11 月底宣布支援 Ruby，現在我們可以用
    Ruby 來開發了，但是在怎麼樣的場景之下我們該使用 AWS Lambda 呢？\r\n\r\n今天探討的軸心為「為什麼在大型系統中我們選擇使用 AWS Lambda
    作為解決方案？」 從「大型架構會遇到哪些開發上的困難點」，引出「AWS Lambda 如何解決這些難點」。\r\n\r\n接著分享使用 AWS Lambda
    實際開發經驗。綜合評估 AWS Lambda 的優缺點，判斷 AWS Lambda 是不是值得使用。\r\n\r\n這邊是你會學到的：\r\n- AWS
    Lambda 是什麼東西？\r\n- 什麼是無伺服器框架？\r\n- 什麼是事件驅動程式設計？\r\n- 了解大型架構的開發上的難點。\r\n- AWS Lambda
    如何解決難點？\r\n- 如何開發 AWS Lambda？\r\n- 開發 AWS Lambda 時需要注意哪些事項。"
- schedule_id: 13
  order: 1
  name: Kuniaki Igarashi
  title: freelancer, nil
  avatar: "//avatars.githubusercontent.com/u/22629?v=3"
  twitter: igaiga555
  github: igaiga
  lang: en
  subject: Road to white mages
  summary: "Debugging occupies a large part of our development time. If only we could
    debug faster and more comfortably, our coding time would be more happier.\r\n\r\nIn
    this talk, I'll introduce Ruby's deep functions for example TracePoint, AST, DTrace
    adopter and others, and talk about how to make great power for debugging applications
    from them. And I also talk about some gems using the techniques that I've published."
- schedule_id: 29
  order: 2
  name: John Lin
  title: ''
  avatar: "//avatars.githubusercontent.com/u/529248?v=3"
  twitter: ''
  github: johnlinvc
  lang: en
  subject: " Automatic Differentiation for Ruby "
  summary: "Calculating gradient or differential is a very common task when working
    in Math heavy field like Machine Learning. But deriving gradient by hand is time-consuming
    and error-prone. Automatic Differentiation(AD) can calculate gradient of arbitrary
    function automatically. AD is efficient(for human) and correct(without human error).\r\nAutodiff
    (johnlinvc/autodiff) brings AD to Ruby. Let's explore the magical
    world of Automatic Differentiation."
- schedule_id: 27
  order: 2
  name: Kazuma Furuhashi
  title: Speee Inc.
  avatar: "//avatars.githubusercontent.com/u/1458041?v=3"
  twitter: 284km
  github: 284km
  lang: en
  subject: Charty - Visualizing your data in Ruby
  summary: "I would like to introduce a new library “Charty” for visualization in
    Ruby.\r\nI will talk about real-world use cases and how Charty can solve them.\r\n"
- schedule_id: 25
  order: 2
  name: Shinsuke IMAI
  title: Engineer, Cookpad Inc
  avatar: "//avatars.githubusercontent.com/u/7425556?v=3"
  twitter: imashin_
  github: shinsukeimai
  lang: en
  subject: Reliable distribution system with Ruby x IoT
  summary: "In our EC service called \"Cookpad Mart\", we develop Ruby x IoT system
    which not just works but works with reliability.\r\n\r\nBy the way, do you cook?
    Is it easy to get very fresh meats, fishes or vegetables around your home? [Cookpad
    Mart](https://cookpad-mart.com/) makes it possible for customers to purchase fresh
    foods directly from farmers, meat shops and fish stores. We deliver ordered foods
    to pick-up points near your home, so you can pick them up anytime you like, without
    waiting for the delivery at your home or paying delivery fees.\r\n\r\nTo deliver
    fresh foods in the day of orders, we built a new distribution system consisting
    of several IoT devices: label printing devices, temperature sensors, location
    sensors and label readers.\r\n\r\nIn this talk, I explain our development of the
    label printing system. We set up label printing devices at all sellers’ shop and
    print labels for each food every day. We have to print the labels without any
    failures because they are for sellers, deliverers and customers to sort or to
    pick up foods, but it is difficult to monitor and to control many such edge devices
    like printers. Then, we solved it with a simple idea. I will talk about how to
    make the label printers reliable with Ruby and IoT technology."
- schedule_id: 13
  order: 2
  name: Yuji Yokoo
  title: ''
  avatar: "//avatars.githubusercontent.com/u/583965?v=3"
  twitter: 'yujiyokoo'
  github: yujiyokoo
  lang: en
  subject: Developing Dreamcast games with mruby
  summary: "What if you could use mruby to develop your own Dreamcast games? Well,
    now you can!\r\n\r\nI have developed and released an \"mruby on Dreamcast\" environment
    and a simple game for it (in mruby, of course).\r\nIt is still at an ealry stage,
    but you can write simple games with it.\r\n\r\nAs I am no expert in C, mruby,
    or Dreamcast programming, I encounterd problems.\r\nThose problems included, but
    were not limited to:\r\n  * Dreamcast library and mruby build errors\r\n  * Having
    no easy way of getting the binary to run on the hardware that gives me access
    to debug print statements\r\n  * A lot of information being obscure and hard to
    find, over the years\r\n\r\nIn this presentation, I would like to introduce you
    to developing mruby programs on Dreamcast, as well as share my story on how I
    solved and worked around problems.\r\nI will try to get you interested in mruby
    and development on old game consoles, as well as give you some insight into what
    might happen if you attempt to revive an old platform for use with modern languages."
